function spikes = GetSpikeTimes(units,varargin)

%GetSpikeTimes - Get spike timestamps.
%
%  USAGE
%
%    spikes = GetSpikeTimes(units,<options>)
%
%    units          optional list of units, i.e. [electrode group, cluster] pairs;
%                   special conventions:
%                     'all'          all units
%                     []             no units
%                     cluster = -1   all clusters except artefacts and MUA
%                     cluster = -2   all clusters except artefacts
%                     cluster = -3   all clusters
%                   (artefacts are assumed to be in cluster 0, and MUA in 1)
%    <options>      optional list of property-value pairs (see table below)
%
%    =========================================================================
%     Properties    Values
%    -------------------------------------------------------------------------
%     'output'      output type, either:
%                     'time', only timestamps (default)
%                     'full', timestamps, electrode groups and clusters
%                     'numbered' timestamps and arbitrary unique identifiers
%                     corresponding to single units (see EXAMPLE below)
%                     'cellexplorer', timestamps, electrode groups and unique
%                     unit identifiers assigned by CellExplorer (NOTE: identifiers
%                     can go from 1 to N, artefacts and MUA are excluded; default
%                     when 'session' is provided, illegal otherwise)
%    'session'      if provided, load <basename>.cell_metrics.cellinfo.mat
%                   file generated by Cell Explorer toolbox, to extract spike
%                   timestamps (thus bypassing the need for the slower SetCurrentSession)
%    =========================================================================
%
%  EXAMPLES
%
%    % timestamps for all spikes
%    s = GetSpikeTimes;
%    % or
%    s = GetSpikeTimes('all');
%
%    % timestamps for units [1 7] and [4 3]
%    s = GetSpikeTimes([1 7;4 3]);
%
%    % timestamps for all single units on electrode group 5, and unit [6 3]
%    s = GetSpikeTimes([5 -1;6 3]);
%
%    % timestamps for all units on electrode group 5, except artefacts
%    s = GetSpikeTimes([5 -2]);
%
%    % timestamps, electrode groups and clusters, for all spikes
%    s = GetSpikeTimes('output','full');
%    % or
%    s = GetSpikeTimes('all','output','full');
%
%    % timestamps and identifiers, for units [1 7], [4 3], and [2 5]
%    % unit [1 7] will be assigned number 1, unit [2 5] number 2, and
%    % unit [4 3] number 3, independent from the order in which they are listed
%    s = GetSpikeTimes([1 7;4 3;2 5],'output','numbered');
%
%    % timestamps, electrode groups, and identifiers loaded from CellExplorer
%    s = GetSpikeTimes('session','<session_path>');
%
%    % timestamps loaded from CellExplorer
%    s = GetSpikeTimes('output','time','session','<session_path>');
%
%    % timestamps loaded from CellExplorer, for units [1 1], [4 3], and [2 -2]
%    % note how unit 1 from cluster 1 is a real unit and how specifying -2
%    % for cluster 2 means all units, as noise and MUA are already excluded
%    s = GetSpikeTimes([1 1;4 3;2 -2],'session','<session_path>');
%
%    % timestamps, electrode groups, and clusters loaded from CellExplorer (can also
%    % be combined with 'units', with negative clusters interpreted as usual)
%    s = GetSpikeTimes('output','full','session','<session_path>');
%
%  NOTE
%
%    An electrode group is an ensemble of closely spaced electrodes that record from
%    the same neurons, e.g. a single wire electrode, or a wire tetrode, or a multisite
%    silicon probe in octrode configuration, etc.
%
%  SEE
%
%    See also LoadSpikeTimes, PlotTicks.

% Copyright (C) 2004-2017 by MichaÃ«l Zugaro & (C) 2025 by Pietro Bozzo
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 3 of the License, or
% (at your option) any later version.

% Default values
output = '';
session = '';
if nargin == 0, units = 'all'; end

% Optional parameter
if ischar(units) && ~strcmp(units,'all')
	varargin = [units,varargin];
	units = 'all';
else
	if ~strcmp(units,'all') && ~isempty(units) && (~isimatrix(units) || size(units,2) ~= 2)
		error('Incorrect list of units (type ''help <a href="matlab:help GetSpikeTimes">GetSpikeTimes</a>'' for details).');
	end
end

% Parse parameter list
for i = 1:2:length(varargin)
	if ~ischar(varargin{i})
		error(['Parameter ' num2str(i+2) ' is not a property (type ''help <a href="matlab:help GetSpikeTimes">GetSpikeTimes</a>'' for details).']);
	end
	switch lower(varargin{i})
		case 'output'
			output = lower(varargin{i+1});
            if ~isastring(output,'time','full','numbered','cellexplorer')
				error('Incorrect value for property ''output'' (type ''help <a href="matlab:help GetSpikeTimes">GetSpikeTimes</a>'' for details).');
            end
        case 'session'
            session = char(varargin{i+1});
            if ~isvector(session)
				error('Incorrect value for property ''session'' (type ''help <a href="matlab:help GetSpikeTimes">GetSpikeTimes</a>'' for details).');
            end
        otherwise
			error(['Unknown property ''' num2str(varargin{i}) ''' (type ''help <a href="matlab:help GetSpikeTimes">GetSpikeTimes</a>'' for details).']);
  end
end

% Default output value
if isempty(session) && strcmp(output,'cellexplorer')
    error('Incorrect value for property ''output'' (type ''help <a href="matlab:help GetSpikeTimes">GetSpikeTimes</a>'' for details).')
end
if isempty(output)
    if isempty(session), output = 'time';
    else, output = 'cellexplorer'; end
end

if isempty(units)
	spikes = [];
elseif ~isempty(session)
    % load CellExplorer file
    ce_file = session(1:find(session == '.',1,'last'))+"cell_metrics.cellinfo.mat";
    if ~isfile(ce_file)
        error('GetSpikeTimes:MissingCellExplorerFile',fileName(ce_file)+" not found.")
    end
    load(ce_file,'cell_metrics')
    spike_times = vertcat(cell_metrics.spikes.times{:});
    n_spikes_per_unit = cellfun(@(x) size(x,1),cell_metrics.spikes.times).';
    unit_group = repelem(cell_metrics.shankID.',n_spikes_per_unit,1);
    unit_cluster = repelem(cell_metrics.cluID.',n_spikes_per_unit,1);
    if strcmp(output,'cellexplorer')
        unit_id = repelem(cell_metrics.cellID.',n_spikes_per_unit,1);
        spikes = [spike_times,unit_group,unit_id];
    else
        spikes = [spike_times,unit_group,unit_cluster];
    end
else
    global DATA;
    if isempty(DATA)
	    error('No session defined (did you forget to call SetCurrentSession? Type ''help <a href="matlab:help Data">Data</a>'' for details).');
    end
    spikes = DATA.spikes;
    unit_cluster = spikes(:,3);
end

% Adjust output matrix size
if isempty(spikes)
	switch output
		case 'time'
			spikes = nan(0,1);
		case 'numbered'
			spikes = nan(0,2);
        otherwise
			spikes = nan(0,3);
	end
	return
end

% Selected units only
if ~isastring(units,'all')
	nUnits = size(units,1);
	selected = false(size(spikes,1),1);
	for i = 1 : nUnits
		group = units(i,1);
		cluster = units(i,2);
        if cluster >= 0
            % keep [group, cluster] combination
            selected = selected | (spikes(:,2) == group & unit_cluster == cluster);
        elseif strcmp(output,'cellexplorer')
            % no clusters must be excluded, as noise and MUA aren't present in CellExplorer
            selected = selected | spikes(:,2) == group; 
        else
            switch cluster
                case -1 % exclude noise and MUA
    				selected = selected | (spikes(:,2) == group & spikes(:,3) ~= 0 & spikes(:,3) ~= 1);
                case -2 % exclude noise
		   		    selected = selected | (spikes(:,2) == group & spikes(:,3) ~= 0);
                case -3 % keep all
				    selected = selected | spikes(:,2) == group;
            end
        end
	end
	spikes = spikes(selected,:);
end

if strcmp(output,'time')
	spikes = spikes(:,1);
elseif strcmp(output,'numbered')
	[~,~,id] = unique(spikes(:,2:end),'rows');
	spikes = [spikes(:,1),id];
end

spikes = sortrows(spikes,1);