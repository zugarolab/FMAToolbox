function SetCurrentSession(varargin)

%SetCurrentSession - Load all data for a given recording session.
%
% Set current session files and read data from disk. Calling SetCurrentSession
% without parameters will display a file selection dialog. If <a href="www.cellexplorer.org">CellExplorer</a>
% format files are detected, they will be laoded instead.
%
%  USAGE
%
%    SetCurrentSession(filename,<options>)
%
%    filename       optional parameter file name; use 'same' to force reload
%    <options>      optional list of property-value pairs (see table below)
%
%    =========================================================================
%     Properties    Values
%    -------------------------------------------------------------------------
%     'spikes'      load or skip spike files (default = 'on')
%     'verbose'     display progress messages (default = 'on')
%    =========================================================================
%
%  NOTE
%
%    If no parameter file name is specified, an interactive file selection
%    dialog is displayed.
%    If the following files generated by <a
%    href="www.cellexplorer.org">CellExplorer</a> are detected, they
%    will be loaded instead of standard files:
%      file name                               replaces
%      <basename>.cell_metrics.cellinfo.mat    <basename>.res, <basename>.clu
%      <basename>.animal.behavior.mat          <basename>.cat.evt
%      <basename>.<event_name>.event.mat       <basename>.<event_name>.evt

% Copyright (C) 2004-2017 by MichaÃ«l Zugaro, 2014 by Gabrielle Girardeau,
% (C) 2025 by Pietro Bozzo
%
% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 3 of the License, or
% (at your option) any later version.

% Default values
spikes = 'on';
verbose = true;
filename = '';

% Filename?
if nargin ~= 0
	if ~isastring(varargin{1},'spikes','verbose')
		filename = varargin{1};
        if isstring(filename)
            filename = char(filename);
        end
		varargin = varargin(2:end);
	end
end

% Check number of parameters
if mod(length(varargin),2) ~= 0
    error('Incorrect number of parameters (type ''help <a href="matlab:help SetCurrentSession">SetCurrentSession</a>'' for details).');
end

% Parse parameter list
for i = 1:2:length(varargin)
	if ~ischar(varargin{i})
		error(['Parameter ' num2str(i+2) ' is not a property (type ''help <a href="matlab:help SetCurrentSession">SetCurrentSession</a>'' for details).']);
	end
	switch lower(varargin{i})
		case 'verbose'
			verbose = lower(varargin{i+1});
            if ~isastring(verbose,'on','off')
				error('Incorrect value for property ''verbose'' (type ''help <a href="matlab:help SetCurrentSession">SetCurrentSession</a>'' for details).');
            end
            verbose = isastring(verbose,'on');
		case 'spikes'
			spikes = lower(varargin{i+1});
			if ~isastring(spikes,'on','off')
				error('Incorrect value for property ''spikes'' (type ''help <a href="matlab:help SetCurrentSession">SetCurrentSession</a>'' for details).');
			end
        otherwise
			error(['Unknown property ''' num2str(varargin{i}) ''' (type ''help <a href="matlab:help SetCurrentSession">SetCurrentSession</a>'' for details).']);
	end
end

global DATA;
separator = filesep;

% Initialization
if isempty(DATA) || ~isfield(DATA,'session') || ~isfield(DATA.session,'basepath') || ~isfield(DATA.session,'basename')
	format long g;
	DATA.session.basename = '';
	DATA.session.path = '';
	DATA.spikeGroups.nGroups = 0;
	DATA.spikeGroups.nSamples = [];
	DATA.spikeGroups.peakSamples = [];
	DATA.spikeGroups.groups = {};
	DATA.nChannels = [];
	DATA.nBits = [];
	DATA.rates.lfp = [];
	DATA.rates.wideband = [];
	DATA.rates.video = [];
	DATA.maxX = [];
	DATA.maxY = [];
	DATA.events.time = [];
	DATA.events.description = {};
	DATA.positions = [];
	DATA.spikes = [];
	% Default settings
	GlobalSettings;
end

if isempty(filename) || (strcmp(filename,'same') && isempty(DATA.session.basename))
	% Interactive mode
	[filename,basepath] = uigetfile('*.xml','Please select a parameter file for this session');
	if filename == 0, return; end
	filename = [basepath filename];
end

if strcmp(filename,'same')
	% Force reload
	basepath = DATA.session.basepath;
	basename = DATA.session.basename;
else
	% Parse file name
	[basepath,basename] = fileparts(filename);
	if isempty(basepath)
        basepath = pwd;
	else
		if ~isfolder(basepath)
			error(['Directory ''' basepath ''' does not exist.']);
		end
		% Clean basepath (e.g., simplify ../ or ./ substrings) and make it absolute
		here = pwd;
		cd(basepath);
		basepath = pwd;
		cd(here);
	end
end

verbose && fprintf(1,['Loading session files for ' basename '\n']);

% File already loaded?
if strcmp(basename,DATA.session.basename) && strcmp(basepath,DATA.session.basepath) && ~strcmp(filename,'same')
	disp('... session files already loaded, skipping - type SetCurrentSession(''same'') to force reload');
	verbose && fprintf(1,'Done\n');
	return
end

% Parameter file
session_file = [basepath separator basename '.session.mat']; % CellExplorer session.mat file
if isfile(session_file)
    verbose && fprintf(1,['... detected session file ''' basename '.session.mat''\n']);
    load(session_file,'session')
    DATA.session.path = basepath;
    DATA.session.name = basename;
    groups = session.extracellular.spikeGroups.channels;
    DATA.spikeGroups.nGroups = numel(groups);
    DATA.spikeGroups.groups = cellfun(@(x) x-1,groups,UniformOutput=false); % remove 1 to match .xml fil convention
    try DATA.nChannels = session.extracellular.nChannels; end
    try fun = @(x) str2double(x(ismember(x,'0123456789'))); DATA.nBits = fun(session.extracellular.precision); end
    try DATA.rates.lfp = session.extracellular.srLfp; end
    try DATA.rates.wideband = session.extracellular.sr; end
    % video information is missing in CellExplorer session.mat file
    DATA.rates.video = 39.0625;
	DATA.maxX = NaN;
	DATA.maxY = NaN;
	disp('... warning: missing video parameters (set to zero)');
else
    DATA = LoadParameters([basepath separator basename '.xml']);
    verbose && fprintf(1,['... loaded parameter file ''' basename '.xml''\n']);
end

% Event file(s)
DATA.events.time = [];
DATA.events.description = {};
behavior_file = [basepath separator basename '.animal.behavior.mat']; % CellExplorer file
if isfile(behavior_file)
    verbose && fprintf(1,['... detected event file ''' basename '.animal.behavior.mat''\n']);
    try
        load(behavior_file,'behavior')
        event_times = cellfun(@(x) [x.startTime;x.stopTime],behavior.epochs.sessions,UniformOutput=false); % CONFLICT: SOMETIMES struct
        DATA.events.time = vertcat(event_times{:}); % CHECK IF IT SHOULD BE cell
        event_descriptions = cellfun(@(x) {['beginning of ',char(x.name)];['end of ',char(x.name)]},behavior.epochs.sessions,UniformOutput=false).';
        event_descriptions = [event_descriptions{:}];
        DATA.events.description = event_descriptions(:);
        error_flag = false;
    catch
        disp("... (could not load '" + behavior_file);
        error_flag = true;
    end
    eventFiles = dir([basepath separator basename '.*.events.mat']); % look for CellExplorer event files
    if error_flag, eventFiles = [eventFiles; dir([basepath separator basename '.cat.evt'])]; end % add FMAT .cat.evt file
else
    eventFiles = dir([basepath separator basename '.*.evt']); % look for standard FMAT event files
end
if ~isempty(eventFiles)
	for i = 1 : length(eventFiles)
		events = LoadEvents([basepath separator eventFiles(i).name]);
        if ~isempty(events.time)
	        DATA.events.time = [DATA.events.time;events.time];
		    DATA.events.description = [DATA.events.description;events.description];
	        verbose && fprintf(1,['... loaded event file ''' eventFiles(i).name '''\n']);
        end
	end
	[DATA.events.time,ind] = sortrows(DATA.events.time);
    DATA.events.description = DATA.events.description(ind);
else
    verbose && fprintf(1,'... (no .evt file found)\n');
end

% Position file
DATA.positions = [];
if exist([basepath separator basename '.pos'],'file')
	DATA.positions = LoadPositions([basepath separator basename '.pos'],DATA.rates.video);
	if verbose, disp(['... loaded position file ''' basename '.pos''']); end
elseif exist([basepath separator basename '.whl'],'file')
	DATA.positions = LoadPositions([basepath separator basename '.whl'],DATA.rates.video);
	if verbose, disp(['... loaded position file ''' basename '.whl''']); end
elseif exist([basepath separator basename '.mqa'],'file')
	DATA.positions = LoadPositions([basepath separator basename '.mqa'],DATA.rates.video);
	if verbose, disp(['... loaded position file ''' basename '.mqa''']); end
else
	verbose && fprintf(1,'... (no position file found)\n');
end

% Spike files
if strcmp(spikes,'on')
    DATA.spikes = [];
    filename = [basepath separator basename '.cell_metrics.cellinfo.mat'];
    load_clu = true;
    if isfile(filename)
        verbose && fprintf(1,['... detected spike file ''' basename '.cell_metrics.cellinfo.mat''\n']);
        try
            load(filename,'cell_metrics')
            spike_times = vertcat(cell_metrics.spikes.times{:});
            n_spikes_per_unit = cellfun(@(x) size(x,1),cell_metrics.spikes.times).';
            unit_group = repelem(cell_metrics.shankID.',n_spikes_per_unit,1);
            unit_cluster = repelem(cell_metrics.cluID.',n_spikes_per_unit,1);
            DATA.spikes = [spike_times,unit_group,unit_cluster];
            DATA.spikeGroups.nSamples = repmat(numel(cell_metrics.waveforms.time{1}),1,DATA.spikeGroups.nGroups);
            [~,ind] = min(abs(cell_metrics.waveforms.time{1}));
            DATA.spikeGroups.peakSample = repmat(ind,1,DATA.spikeGroups.nGroups);
            load_clu = false;
        catch
            disp("... (could not load '" + basename + ".cell_metrics.cellinfo.mat')");
        end
    end
    if load_clu
        for i = 1 : DATA.spikeGroups.nGroups
            filename = [basepath separator basename '.clu.' int2str(i)];
            if exist(filename,'file')
                try
                	DATA.spikes = [DATA.spikes;LoadSpikeTimes(filename,DATA.rates.wideband)];
            		verbose && fprintf(1,['... loaded spike file ''' basename '.clu.' int2str(i) '''\n']);
                catch ME
                    if verbose
                        % differentiate error message in case .res file is missing
                        if ME.identifier == "LoadSpikeTimes:MissingRes"
                            disp("... (could not load spike file '" + basename + ".res." + int2str(i) + "')");
                        elseif ME.identifier == "LoadSpikeTimes:ResCluSize"        
                            disp("... (contents of .res." + int2str(i) + " and .clu." + int2str(i) + " files have incompatible size)");
                        else
                            disp("... (could not load spike file '" + basename + ".clu." + int2str(i) + "')");
                        end
                    end
                end
            end
        end
    end
	if isempty(DATA.spikes) && verbose, disp('... (no spike file found)'); end
else
	verbose && fprintf(1,'... (skipping spike files)\n');
end

% This is updated only once the files have been properly loaded
DATA.session.basename = basename;
DATA.session.basepath = basepath;

verbose && fprintf(1,'Done\n');